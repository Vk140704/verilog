$date
	Tue Oct 14 20:40:52 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module adder_sub $end
$var wire 4 ! a [3:0] $end
$var wire 4 " b [3:0] $end
$var wire 4 # b_inverter [3:0] $end
$var wire 1 $ control $end
$var wire 3 % ripple_out [2:0] $end
$var wire 4 & out [3:0] $end
$var wire 1 ' cout $end
$scope module f1 $end
$var wire 1 ( a $end
$var wire 1 ) b $end
$var wire 1 * carry $end
$var wire 1 $ cin $end
$var wire 1 + sum $end
$upscope $end
$scope module f2 $end
$var wire 1 , a $end
$var wire 1 - b $end
$var wire 1 . carry $end
$var wire 1 / cin $end
$var wire 1 0 sum $end
$upscope $end
$scope module f3 $end
$var wire 1 1 a $end
$var wire 1 2 b $end
$var wire 1 3 carry $end
$var wire 1 4 cin $end
$var wire 1 5 sum $end
$upscope $end
$scope module f4 $end
$var wire 1 6 a $end
$var wire 1 7 b $end
$var wire 1 ' carry $end
$var wire 1 8 cin $end
$var wire 1 9 sum $end
$upscope $end
$upscope $end
$scope module mode_tb $end
$var wire 1 : out $end
$var wire 1 ; cout $end
$var reg 1 < a $end
$var reg 1 = b $end
$var reg 1 > control $end
$scope module uut $end
$var wire 1 < a $end
$var wire 1 = b $end
$var wire 1 ; carry $end
$var wire 1 > cin $end
$var wire 1 : sum $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
x>
x=
x<
x;
x:
x9
x8
x7
z6
x5
x4
x3
x2
z1
x0
x/
x.
x-
z,
x+
x*
x)
z(
x'
bx &
bx %
z$
bx #
bz "
bz !
$end
#10
1;
0:
1>
0=
1<
#20
0;
0>
0<
#40
1;
1=
1<
#50
